from fastapi import APIRouter, HTTPException, status, Request
from typing import List
from enum import Enum
import pandas as pd
import time
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from psycopg2 import pool
from dotenv import load_dotenv
from orbit.models import DLT
from orbit.diagnostics.plot import plot_predicted_data
load_dotenv()


router = APIRouter()

# --- Initialize a connection pool at module level ---
DATABASE_URL = os.getenv("DATABASE_URL")
db_pool = psycopg2.pool.SimpleConnectionPool(minconn=1, maxconn=10, dsn=DATABASE_URL)

print("DATABASE_URL:", os.getenv("DATABASE_URL"))

def forecast_one_item(item, forecast_horizon):
    """
    Run Orbit DLT forecasting for a single item. Expects item dict with 'item_nbr' and 'history'.
    Output is 1:1 compatible with Prophet version.
    """
    item_id = item["item_nbr"]
    history = item["history"]
    start = time.time()
    df = pd.DataFrame(history)
    df["ds"] = pd.to_datetime(df["ds"])
    df = df.sort_values("ds")
    print(f"[FastAPI] Forecasting item {item_id} with {len(df)} data points (Orbit).")

    # Orbit expects columns: 'ds' (datetime), 'y' (float)
    # DLT model can be run with minimal config for Prophet-like use
    # No direct weekly/yearly seasonality toggles, but can use seasonality argument
    seasonality = []
    if len(df) >= 30:
        seasonality.append("weekly")
    if len(df) >= 104:
        seasonality.append("yearly")

    # Fit the DLT model
    model = DLT(response_col="y", date_col="ds", seasonality=seasonality if seasonality else None)
    model.fit(df)

    # Make future dataframe
    last_date = df["ds"].max()
    future_dates = pd.date_range(start=last_date + pd.Timedelta(weeks=1), periods=forecast_horizon, freq="W")
    future_df = pd.DataFrame({"ds": future_dates})
    # Orbit expects a dataframe with 'ds' and optionally 'y' (for prediction, y can be NaN)
    df_pred = pd.concat([df, future_df], ignore_index=True, sort=False)
    # Predict
    pred = model.predict(df_pred)
    # The forecasted values are in pred['prediction']
    forecast_needed = pd.DataFrame({
        "ds": future_dates,
        "yhat": pred.loc[df.shape[0]:, "prediction"].clip(lower=0).values
    })
    duration = time.time() - start
    print(f"[FastAPI] Forecast for item {item_id} took {duration:.2f} seconds (Orbit).")
    return {
        "item_nbr": item_id,
        "forecast": forecast_needed.to_dict(orient="records")
    }
